** Kotlin도 JNI가 완벽히 지원된다. (JNI 메서드를 외부 제어자로 표시하기만 하면 된다.)

1. 모든 소스 파일은 UTF-8로 인코딩 되어야 한다.

2. 확장자는 .kt

3. 구조
- .kt 파일은 다음과 같은 순서로 구성된다.
	1) 저작권 및 라이센스 헤더(선택사항)
	2) 파일 수준 주석
	3) Package 문 (열 제한을 받지 않으며 줄바꿈되지 않는다.)
	4) Import 문 (모든 유형의 와일드 카드 가져오기는 허용되지 않는다, 열 제한을 받지 않으며 줄바꿈 되지 않는다)
	5) 최상위 수준 선언
	
4. 코드 열 제한은 100자

5. 함수
e.g)
	fun <T> Iterable<T>.joinToString(
		separator: CharSequence = ", ",
		prefix: CharSequence = "",
		postfix: CharSequence = ""
	): String {
    // …
	}
	
 - 표현식 함수
 e.g)
	override fun toString(): String {
		return "Hey"
	}
	
	override fun toString(): String = "Hey"
	
6. Enum 클래스
e.g)
	enum class Answer { YES, NO, MAYBE }
	
	
	enum class Answer {
    YES,
    NO,

    MAYBE {
        override fun toString() = """¯\_(ツ)_/¯"""
    }
}


7. 카멜 표기법
 - 영어 구를 카멜 표기법으로 합라지거으로 변환할 수 있는 다양한 방법이 있다.
 - e.g IPv6, iOS

 구문 형식의 이름으로 시작
 1) 구문을 일반 ASCII로 변환하고 모든 아포스트로피를 삭제합니다. 예를 들어 'Müller’s algorithm'이 'Muellers algorithm'으로 변환될 수 있습니다.
 
 2) 공백 및 나머지 구두점(일반적으로 하이픈)에서 분할하여 이 결과를 단어로 나눕니다. 권장: 단어에 일반적인 용도의 카멜 표기법이 이미 있는 경우 이 단어를 구성요소로 분할합니다. 예를 들어 'AdWords'는 'ad words'로 분할됩니다. 'iOS'와 같은 단어는 실제로 카멜 표기법이 아니며, 어떤 규칙도 따르고 있지 않으므로 이 권장 사항이 적용되지 않습니다.
 
 3) 모두 소문자(두문자어 포함)인 경우 다음 중 하나를 실행합니다.
	파스칼 표기법을 적용하려면 각 단어의 첫 글자를 대문자로 시작합니다.
	카멜 표기법을 적용하려면 첫 단어를 제외한 각 단어의 첫 글자를 대문자로 시작합니다.
 
 4) 마지막으로 모든 단어를 단일 식별자로 결합합니다.
 
 e.g)
 구문 형식				올바름				올바르지 않음
'XML HTTP 요청'		XmlHttpRequest			XMLHTTPRequest
'새 고객 ID'			newCustomerId			newCustomerID
'내부 스톱워치'		innerStopwatch			innerStopWatch
'iOS에서 IPv6 지원'	supportsIpv6OnIos		supportsIPv6OnIOS
'YouTube 가져오기 도구'	YouTubeImporter		YoutubeImporter*